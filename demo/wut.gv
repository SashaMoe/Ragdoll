digraph G {
rankdir=BT;
fontname = "Times New Roman"
fontsize = 12
node [
fontname = "Times New Roman"
fontsize = 12
shape = "record"
]
"java.io.FilterInputStream" [
color=black
fillcolor="green"
style=filled
label = "{java.io.FilterInputStream
«Decorator»|# in : java.io.InputStream\l|+ read(): int\l+ read(b0 : byte[]): int\l+ read(b0 : byte[], i1 : int, i2 : int): int\l+ skip(l0 : long): long\l+ available(): int\l+ close(): void\l+ mark(i0 : int): void\l+ reset(): void\l+ markSupported(): boolean\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"java.io.FilterInputStream" -> "java.io.InputStream"
edge [
style = "dashed"
arrowhead = "vee"
]
edge [
style = "solid"
arrowhead = "vee"
label = "decorate"
]
"java.io.FilterInputStream" -> "java.io.InputStream"
edge [label=" "]
"ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream" [
color=black
fillcolor="green"
style=filled
label = "{ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream
«Decorator»|- decryptor : ragdoll.asm.uml.test.sample.decorator.IDecryption\l- instance : ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream\l|+ getInstance(j0 : java.io.InputStream, r1 : ragdoll.asm.uml.test.sample.decorator.IDecryption): DecryptionInputStream\l+ read(): int\l+ read(b0 : byte[], i1 : int, i2 : int): int\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream" -> "java.io.FilterInputStream"
edge [
style = "dashed"
arrowhead = "vee"
]
edge [
style = "solid"
arrowhead = "vee"
label = " "
]
"ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream" -> "ragdoll.asm.uml.test.sample.decorator.IDecryption"
edge [
style = "solid"
arrowhead = "vee"
label = " "
]
"ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream" -> "ragdoll.asm.uml.test.sample.decorator.DecryptionInputStream"
edge [label=" "]
"java.io.InputStream" [
color=black
fillcolor="green"
style=filled
label = "{«abstract»\njava.io.InputStream
«Target»|- MAX_SKIP_BUFFER_SIZE : int\l|+ read(): int\l+ read(b0 : byte[]): int\l+ read(b0 : byte[], i1 : int, i2 : int): int\l+ skip(l0 : long): long\l+ available(): int\l+ close(): void\l+ mark(i0 : int): void\l+ reset(): void\l+ markSupported(): boolean\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"java.io.InputStream" -> "java.io.Closeable"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
edge [label=" "]
}

