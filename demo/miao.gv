digraph G {
rankdir=BT;
fontname = "Times New Roman"
fontsize = 12
node [
fontname = "Times New Roman"
fontsize = 12
shape = "record"
]
"ragdoll.asm.ClassMethodVisitor$2" [
label = "{ragdoll.asm.ClassMethodVisitor$2|~ this$0 : ragdoll.asm.ClassMethodVisitor\l|+ visitMethodInsn(i0: ints1: Strings2: Strings3: Stringb4: boolean): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassMethodVisitor$2" -> "org.objectweb.asm.MethodVisitor"
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassMethodVisitor$2" -> "ragdoll.asm.ClassMethodVisitor"
"ragdoll.asm.ClassMethodVisitor$1" [
label = "{ragdoll.asm.ClassMethodVisitor$1|~ this$0 : ragdoll.asm.ClassMethodVisitor\l|}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassMethodVisitor$1" -> "org.objectweb.asm.MethodVisitor"
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassMethodVisitor$1" -> "ragdoll.asm.ClassMethodVisitor"
"ragdoll.code.impl.Field" [
label = "{ragdoll.code.impl.Field|- fieldName : java.lang.String\l- accessLevel : java.lang.String\l- type : java.lang.String\l|+ getFieldName(): String\l+ getAccessLevel(): String\l+ getType(): String\l+ accept(i0: IVisitor): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Field" -> "ragdoll.code.api.IField"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.impl.Field" -> "ragdoll.code.visitor.api.IVisitor"
"ragdoll.code.impl.Klass" [
label = "{ragdoll.code.impl.Klass|- useSet : java.util.Set\l- fieldMap : java.util.HashMap\l- iClasses : java.util.Map\l- name : java.lang.String\l- methodList : java.util.List\l- declaration : ragdoll.code.api.IClassDeclaration\l|+ addMethod(i0: IMethod): void\l+ addUse(s0: String): void\l+ addField(i0: IField): void\l+ setDeclaration(i0: IClassDeclaration): void\l+ getDeclaration(): IClassDeclaration\l+ getMethodList(): List\l+ getFieldMap(): HashMap\l+ accept(i0: IVisitor): void\l+ getName(): String\l+ getUseSet(): Set\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Klass" -> "ragdoll.code.api.IClass"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.impl.Klass" -> "ragdoll.code.api.IField"
"ragdoll.code.impl.Klass" -> "ragdoll.code.api.IMethod"
"ragdoll.code.impl.Klass" -> "ragdoll.code.visitor.api.IVisitor"
"ragdoll.code.impl.Klass" -> "ragdoll.code.api.IClassDeclaration"
"ragdoll.app.Ragdoll" [
label = "{ragdoll.app.Ragdoll||+ main(s0: String[]): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassMethodVisitor" [
label = "{ragdoll.asm.ClassMethodVisitor|- c : ragdoll.code.api.IClass\l|+ visitMethod(i0: ints1: Strings2: Strings3: Strings4: String[]): MethodVisitor\l~ access$0(c0: ClassMethodVisitor): IClass\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassMethodVisitor" -> "org.objectweb.asm.ClassVisitor"
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassMethodVisitor" -> "ragdoll.asm.ClassMethodVisitor"
"ragdoll.asm.ClassMethodVisitor" -> "ragdoll.code.api.IClass"
"ragdoll.code.impl.ClassDeclaration" [
label = "{ragdoll.code.impl.ClassDeclaration|- nameOfInterfaces : java.util.List\l- nameOfSuperClass : java.lang.String\l- className : java.lang.String\l- isAbstract : boolean\l- isInterface : boolean\l|+ isAbstract(): boolean\l+ isInterface(): boolean\l+ getClassName(): String\l+ getNameOfSuperClass(): String\l+ getNameOfInterfaces(): List\l+ accept(i0: IVisitor): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.ClassDeclaration" -> "ragdoll.code.api.IClassDeclaration"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.impl.ClassDeclaration" -> "ragdoll.code.visitor.api.IVisitor"
"ragdoll.code.visitor.api.IVisitor" [
label = "{«interface»\nragdoll.code.visitor.api.IVisitor|+ visit(i0: IClass): void\l+ postVisit(i0: IClass): void\l+ visit(i0: IField): void\l+ visit(s0: String): void\l+ visit(i0: IMethod): void\l+ visit(i0: IClassDeclaration): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.visitor.api.IVisitor" -> "ragdoll.code.api.IField"
"ragdoll.code.visitor.api.IVisitor" -> "ragdoll.code.api.IMethod"
"ragdoll.code.visitor.api.IVisitor" -> "ragdoll.code.api.IClassDeclaration"
"ragdoll.code.visitor.api.IVisitor" -> "ragdoll.code.api.IClass"
"ragdoll.code.api.IClassComponent" [
label = "{«interface»\nragdoll.code.api.IClassComponent|}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClassComponent" -> "ragdoll.code.visitor.api.ITraverser"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.visitor.api.ITraverser" [
label = "{«interface»\nragdoll.code.visitor.api.ITraverser|+ accept(i0: IVisitor): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.visitor.api.ITraverser" -> "ragdoll.code.visitor.api.IVisitor"
"ragdoll.util.ClassFinder" [
label = "{ragdoll.util.ClassFinder|- BAD_PACKAGE_ERROR : java.lang.String\l- CLASS_SUFFIX : java.lang.String\l- DOT : char\l- SLASH : char\l|+ find(s0: String): List\l- find(f0: Files1: String): List\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassFieldVisitor" [
label = "{ragdoll.asm.ClassFieldVisitor|- c : ragdoll.code.api.IClass\l|+ visitField(i0: ints1: Strings2: Strings3: Stringo4: Object): FieldVisitor\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassFieldVisitor" -> "org.objectweb.asm.ClassVisitor"
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassFieldVisitor" -> "ragdoll.code.api.IClass"
"ragdoll.code.api.IField" [
label = "{«interface»\nragdoll.code.api.IField|+ getFieldName(): String\l+ getAccessLevel(): String\l+ getType(): String\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IField" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.api.IMethod" [
label = "{«interface»\nragdoll.code.api.IMethod|+ getMethodName(): String\l+ getAccessLevel(): String\l+ getReturnType(): String\l+ getParamTypes(): List\l+ getExceptions(): List\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IMethod" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.impl.Method" [
label = "{ragdoll.code.impl.Method|- accessLevel : java.lang.String\l- paramTypes : java.util.List\l- methodName : java.lang.String\l- returnType : java.lang.String\l- exceptions : java.util.List\l|+ getMethodName(): String\l+ getAccessLevel(): String\l+ getReturnType(): String\l+ getParamTypes(): List\l+ getExceptions(): List\l+ accept(i0: IVisitor): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Method" -> "ragdoll.code.api.IMethod"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.impl.Method" -> "ragdoll.code.visitor.api.IVisitor"
"ragdoll.code.api.IClassDeclaration" [
label = "{«interface»\nragdoll.code.api.IClassDeclaration|+ isAbstract(): boolean\l+ isInterface(): boolean\l+ getClassName(): String\l+ getNameOfSuperClass(): String\l+ getNameOfInterfaces(): List\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClassDeclaration" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.api.IClass" [
label = "{«interface»\nragdoll.code.api.IClass|+ addMethod(i0: IMethod): void\l+ addField(i0: IField): void\l+ addUse(s0: String): void\l+ setDeclaration(i0: IClassDeclaration): void\l+ getDeclaration(): IClassDeclaration\l+ getMethodList(): List\l+ getFieldMap(): HashMap\l+ getUseSet(): Set\l+ getName(): String\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClass" -> "ragdoll.code.visitor.api.ITraverser"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.api.IClass" -> "ragdoll.code.api.IField"
"ragdoll.code.api.IClass" -> "ragdoll.code.api.IMethod"
"ragdoll.code.api.IClass" -> "ragdoll.code.api.IClassDeclaration"
"ragdoll.code.visitor.impl.GVOutputStream" [
label = "{ragdoll.code.visitor.impl.GVOutputStream|- sb : java.lang.StringBuffer\l|+ initBuffer(): void\l+ endBuffer(): void\l- appendBufferLine(s0: String): void\l+ visit(i0: IClass): void\l+ postVisit(i0: IClass): void\l+ visit(i0: IField): void\l+ visit(s0: String): void\l+ visit(i0: IMethod): void\l+ visit(i0: IClassDeclaration): void\l- getLastPartOfType(s0: String): String\l- packagifyClassName(s0: String): String\l+ toString(): String\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.visitor.api.IVisitor"
edge [
style = "solid"
arrowhead = "empty"
]
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.api.IField"
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.api.IMethod"
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.api.IClassDeclaration"
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.api.IClass"
"ragdoll.asm.ClassDeclarationVisitor" [
label = "{ragdoll.asm.ClassDeclarationVisitor|- c : ragdoll.code.api.IClass\l|+ visit(i0: inti1: ints2: Strings3: Strings4: Strings5: String[]): void\l}"
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassDeclarationVisitor" -> "org.objectweb.asm.ClassVisitor"
edge [
style = "dashed"
arrowhead = "vee"
]
"ragdoll.asm.ClassDeclarationVisitor" -> "ragdoll.code.api.IClass"
}

