digraph G {
fontname = "Times New Roman"
fontsize = 8
node [
fontname = "Times New Roman"
fontsize = 8
shape = "record"
]
"ragdoll.app.ClassFinder" [
label = <{ragdoll.app.ClassFinder|- BAD_PACKAGE_ERROR : java.lang.String<br/>- CLASS_SUFFIX : java.lang.String<br/>- DOT : char<br/>- SLASH : char<br/>|+ find(s0: String): List<br/>- find(f0: Files1: String): List<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.app.Ragdoll" [
label = <{ragdoll.app.Ragdoll||+ main(s0: String[]): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassDeclarationVisitor" [
label = <{ragdoll.asm.ClassDeclarationVisitor|- c : ragdoll.code.api.IClass<br/>|+ visit(i0: inti1: ints2: Strings3: Strings4: Strings5: String[]): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassDeclarationVisitor" -> "org.objectweb.asm.ClassVisitor"
"ragdoll.asm.ClassFieldVisitor" [
label = <{ragdoll.asm.ClassFieldVisitor|- c : ragdoll.code.api.IClass<br/>|+ visitField(i0: ints1: Strings2: Strings3: Stringo4: Object): FieldVisitor<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassFieldVisitor" -> "org.objectweb.asm.ClassVisitor"
"ragdoll.asm.ClassMethodVisitor" [
label = <{ragdoll.asm.ClassMethodVisitor|- c : ragdoll.code.api.IClass<br/>|+ visitMethod(i0: ints1: Strings2: Strings3: Strings4: String[]): MethodVisitor<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.asm.ClassMethodVisitor" -> "org.objectweb.asm.ClassVisitor"
"ragdoll.code.api.IClass" [
label = <{«interface»<br/>ragdoll.code.api.IClass|+ addMethod(i0: IMethod): void<br/>+ addField(i0: IField): void<br/>+ setDeclaration(i0: IClassDeclaration): void<br/>+ getDeclaration(): IClassDeclaration<br/>+ getName(): String<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClass" -> "ragdoll.code.visitor.api.ITraverser"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.api.IClassComponent" [
label = <{«interface»<br/>ragdoll.code.api.IClassComponent|}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClassComponent" -> "ragdoll.code.visitor.api.ITraverser"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.api.IClassDeclaration" [
label = <{«interface»<br/>ragdoll.code.api.IClassDeclaration|+ isAbstract(): boolean<br/>+ isInterface(): boolean<br/>+ getClassName(): String<br/>+ getNameOfSuperClass(): String<br/>+ getNameOfInterfaces(): List<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IClassDeclaration" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.api.IField" [
label = <{«interface»<br/>ragdoll.code.api.IField|+ getFieldName(): String<br/>+ getAccessLevel(): String<br/>+ getType(): String<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IField" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.api.IMethod" [
label = <{«interface»<br/>ragdoll.code.api.IMethod|+ getMethodName(): String<br/>+ getAccessLevel(): String<br/>+ getReturnType(): String<br/>+ getParamTypes(): List<br/>+ getExceptions(): List<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.api.IMethod" -> "ragdoll.code.api.IClassComponent"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.impl.ClassDeclaration" [
label = <{ragdoll.code.impl.ClassDeclaration|- nameOfInterfaces : java.util.List<br/>- nameOfSuperClass : java.lang.String<br/>- className : java.lang.String<br/>- isAbstract : boolean<br/>- isInterface : boolean<br/>|+ isAbstract(): boolean<br/>+ isInterface(): boolean<br/>+ getClassName(): String<br/>+ getNameOfSuperClass(): String<br/>+ getNameOfInterfaces(): List<br/>+ accept(i0: IVisitor): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.ClassDeclaration" -> "ragdoll.code.api.IClassDeclaration"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.impl.Field" [
label = <{ragdoll.code.impl.Field|- fieldName : java.lang.String<br/>- accessLevel : java.lang.String<br/>- type : java.lang.String<br/>|+ getFieldName(): String<br/>+ getAccessLevel(): String<br/>+ getType(): String<br/>+ accept(i0: IVisitor): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Field" -> "ragdoll.code.api.IField"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.impl.Klass" [
label = <{ragdoll.code.impl.Klass|- fieldMap : java.util.HashMap<br/>- name : java.lang.String<br/>- methodList : java.util.List<br/>- declaration : ragdoll.code.api.IClassDeclaration<br/>|+ addMethod(i0: IMethod): void<br/>+ addField(i0: IField): void<br/>+ setDeclaration(i0: IClassDeclaration): void<br/>+ getDeclaration(): IClassDeclaration<br/>+ accept(i0: IVisitor): void<br/>+ getName(): String<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Klass" -> "ragdoll.code.api.IClass"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.impl.Method" [
label = <{ragdoll.code.impl.Method|- accessLevel : java.lang.String<br/>- paramTypes : java.util.List<br/>- methodName : java.lang.String<br/>- returnType : java.lang.String<br/>- exceptions : java.util.List<br/>|+ getMethodName(): String<br/>+ getAccessLevel(): String<br/>+ getReturnType(): String<br/>+ getParamTypes(): List<br/>+ getExceptions(): List<br/>+ accept(i0: IVisitor): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.impl.Method" -> "ragdoll.code.api.IMethod"
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.visitor.api.ITraverser" [
label = <{«interface»<br/>ragdoll.code.visitor.api.ITraverser|+ accept(i0: IVisitor): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.visitor.api.IVisitor" [
label = <{«interface»<br/>ragdoll.code.visitor.api.IVisitor|+ visit(i0: IClass): void<br/>+ postVisit(i0: IClass): void<br/>+ visit(i0: IField): void<br/>+ visit(s0: String): void<br/>+ visit(i0: IMethod): void<br/>+ visit(i0: IClassDeclaration): void<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
edge [
style = "solid"
arrowhead = "empty"
]
"ragdoll.code.visitor.impl.GVOutputStream" [
label = <{ragdoll.code.visitor.impl.GVOutputStream|- sb : java.lang.StringBuffer<br/>|+ initBuffer(): void<br/>+ endBuffer(): void<br/>- appendBufferLine(s0: String): void<br/>+ visit(i0: IClass): void<br/>+ postVisit(i0: IClass): void<br/>+ visit(i0: IField): void<br/>+ visit(s0: String): void<br/>+ visit(i0: IMethod): void<br/>+ visit(i0: IClassDeclaration): void<br/>- getLastPartOfType(s0: String): String<br/>- packagifyClassName(s0: String): String<br/>+ toString(): String<br/>}>
]
edge [
style = "dashed"
arrowhead = "empty"
]
"ragdoll.code.visitor.impl.GVOutputStream" -> "ragdoll.code.visitor.api.IVisitor"
edge [
style = "solid"
arrowhead = "empty"
]
}